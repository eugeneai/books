Одним из подходов, реализующих концепцию порождающего программирования, является MDA.~Особенности спецификации MDA состоят в том, что в ней представлены виды моделей, которые требуется модифицировать с целью получения исходного программного кода. Однако спецификация никак не оговаривает способы и технологии трансформации таких моделей. Рассмотрим виды моделей информационных систем (ИС), их представление и трансформацию.

Процесс создания ИС начинается с построения вычислительно"=независимой модели~-- CIM (Computational Independent Model) или с построения платформенно"=независимой модели~-- PIM (Platform Independent Model) \cite{b115}. В соответствии со спецификацией стадия составления CIM не является обязательной и носит лишь рекомендательный характер. В данной модели описываются общие требования к системе, словарь используемых понятий и условия функционирования (окружение). Модель не должна содержать никаких сведений технического характера, описаний структуры и функционала системы. CI M~-- максимально общая и не зависимая от реализации системы модель. Как правило, данная модель реализуется на языке UML (Unified Modeling Language) [l46], а в дальнейшем обогащается и уточняется.

Уточнения CIM приводят к создания PIM.~В рассматриваемом далее подходе к реализации MDA не используются CIMмодели.

Платформенно"=независимая модель PIM~-- это основа MDA.~При помощи PIM ИС описывается на абстрактном уровне, который позволяет рассматривать разрабатываемую ИС как не зависящую от конкретных свойств программно"=аппаратной платформы будущей реализации. В соответствии с MDA рекомендуется доводить PIM до высокой степени детализации, вплоть до использования высокоуровневого платформенно"=независимого языка программирования для описания функций ИС.~Однако в спецификации MDA предписывается отличать детали, описывающие поведение системы с точки зрения пользователя, от деталей ее практической реализации: последние не должны присутствовать в платформенно"=независимой модели. Одним из способов представления PIM является UML.~При разработке 13М1 -диаграмма является как средством формального описания системы, так и средством ее документирования для разработчика. При этом некоторые аспекты реализуемых подсистем можно описать при помощи дополнительных, пользовательских тэгов для объектов UML"=диаграммы.

Можно отметить, что исходная UML"=модель может быть обогащена формализованными ограничениями, заданными на языке ОС1 (Object Constraint Language) [70, 156]. Такого рода ограничения играют важную роль в проектировании и реализации ИС.~Ограничения задают свойства как предметной области разрабатываемой ИС, так и специфики ее реализации. В UMLдиаграмме возможно задание ограничений на сущности модели с помощью как естественного, так и формального языков. Ограничения, заданные на естественном языке, сложно однозначно интерпретировать. Для задания однозначно интерпретируемых формальных ограничений можно использовать методы теории множеств, алгебры логики и других математических структур. Однако этот способ требует от разработчика высокой математической квалификации и не соответствует современному стилю программирования. Как вариант задания ограничений над объектами UML"=модели используется формальный язык OCL.~Данный язык схож своим синтаксисом с объектно"=ориентированными языками программирования. Он достаточно понятен разработчику и в то же время строг, что предоставляет возможность обработки ограничения с помощью соответствующего программного обеспечения.

OCL является частью спецификации UML.~OCL"=выражения позволяют задавать критерии непротиворечивости UMLмодели в целом, а также свойства отдельных элементов этой модели (например, вычислимые атрибуты классов). Применение OCL в UML"=диаграммах обусловлено необходимостью задания детальной формальной спецификации объектов. Как язык задания ограничений он используется для:

задания инвариантов~-- логических выражений, вычисление которых должно давать значение «true» в момент созданиякаждого экземпляра объекта и сохранять это значение в течение всего времени жизни этого объекта;

описания охранных условий, используются, как правило, в диаграммах состояния UML.~Они представляют собой условие, которое должно быть выполнено для возможности осуществления перехода между смежными состояниями. Охранные условия записываются в квадратных скобках и используются в качестве триггеров;

задания преди постусловий, накладываемых на операции и методы. Предусловиями называются ограничения, которым должны удовлетворять входные значения функции, а постусловиями~-- ограничения, которым удовлетворяют выходные значения функции.

 Для задания и вычисления OCL"=выражений всегда требуется некоторый контекст, определяемый с помощью имени типа экземпляра или класса. Результатом каждого OCL"=выражения является, как правило, логическое значение. В UML объект может быть ассоциирован с другим объектом посредством бинарной связи. Язык OCL позволяет выполнять три операции над объектами:

получение значения атрибута;

переход по соединению;

вызов операции класса и получение значения, возврашаемого операцией.

Это позволяет отслеживать ограничения как родительского объекта, так и всех дочерних и объектов, связанных с родительским.

После того как PIM достаточно детализирована, выполняется переход к модели, зависяшей от платформы (Platform Specific Model, PSM) \cite{b115}. PSM является моделью каркаса ИС, в которой функции ИС представлены с учетом специфики и свойств заданной программно"=аппаратной платформы.

Преобразование из PIM в PSM осуществляется при помоши формального представления свойств платформы, модели программно"=аппаратной платформы (Platform Model). В PSMмодели происходит дальнейшая детализация PIM"=модели и добавление элементов, специфичных для конкретного способа реализации. Можно сказать, что PSM является описанием ИС, представляющим ее на уровне программного кода, т.~е. со значительной детализацией особенностей реализации по сравнению с PIM.~С учетом всех требований к программно"=аппаратной платформе на основе PSM синтезируется программный код ИС.~Общая схема трансформации из PIM в PSM представлена на рис. 6.1.

Рисунок. Стадии создания каркаса ИС в соответствии с MDA.

Для реализации рассмотренного MDA"=подхода к созданию ИС предложена технология, основанная на применении формализованных знаний в процессе трансформации моделей.

Начальной стадией разработки является составление технического задания и выработка требований к создаваемой ИС.~Архитектура и требования к ИС представляются как объектная информационная модель, выраженная в виде диаграммы классов языка UML.~В данном случае это и представляет собой PIM.~Следующей стадией разработки является автоматическое порождение PSM и программного кода каркаса ИС.~В зависимости от правил, задающих требования к программно"=аппаратной платформе, и имеющихся шаблонов программного кода среды функционирования возможно порождение нескольких вариантов реализации одной ИС.~Порождение по одной модели гарантирует совместимость интерфейсов для информационного обмена, для случая распределенной среды функционирования.

Результатом порождения программного кода каркаса \cite{b93} ИС являются:

SQL"=запросы для создания таблиц БД, создания, редактирования, удаления записей в эти таблицы;

API-интерфейс взаимодействия с БД ИС;

заготовки (шаблоны) элементов пользовательского (визуального) интерфейса.

Рисунок. Схема применения технологии разработки ИС.

После генерации программного кода ИС требуется его адаптация. Под адаптацией кода в рамках рассматриваемой реализации понимается связывание порожденных элементов ИС.~Схема применения данной технологии синтеза каркаса ИС представлена на рис. 6.2.

Использование формализованного представления модели позволяет упростить разработку интерфейсов для реализации экспорта данных из унаследованных (ранее используемых ИС) для обеспечения целостности массива данных, представленных в ИС.

# МЕТОДОЛОГИЯ ТРАНСФОРМАЦИИ МОДЕЛЕЙ

В соответствии со спецификацией MDA программный код библиотек каркаса ИС должен порождаться автоматически на основе информационной и структурной моделей ИС.~Рассмотрим технологию автоматического синтеза (генерации) целевого программного кода ИС по ее модели. Генерирование программного кода осуществляется при помощи последовательной трансформации исходной модели ИС.

Можно сформулировать требования, которым должно соответствовать средство трансформации моделей для его применения в MDA:

Формальность и полнота. С помощью языка описания трансформаций можно задать любую необходимую трансформацию для любой платформы. При этом описание должно быть формализованным настолько, чтобы было возможно автоматическое его выполнение.

Универсальность правил трансформации. MDA имеет преимущество по сравнению со стандартными подходами к разработке ПО за счет того, что для перехода к PSM можно использовать стандартные описания трансформаций. Если бы для каждой системы трансформацию приходилось описывать заново, это оказалось бы даже менее эффективно, чем переход от PIM к PSM вручную. Поэтому необходимо, чтобы язык описания трансформации позволял задавать трансформации, применимые для множества проектов, а не только для одной конкретной UML"=модели. Желательно, чтобы в языке были предусмотрены средства для настройки и параметризации трансформации, не требующей кардинальной переделки всего описания трансформации.

Поддержка целостности при модификации. Во время разработки ни одна модель не остается неизменной. Это значит, что уже после трансформации как исходные модели, так и модели, созданные в процессе трансформации, могут быть изменены. При этом должен иметься способ поддерживать соответствие между этими моделями, достигнутое в процессе трансформации. Для этого необходимо сохранять информацию о ходе трансформации и о получившихся в процессе трансформации зависимостях между элементами модели, чтобы специализированный инструмент редактирования UML мог использовать эту информацию для автоматического поддержания соответствия между моделями.

Наглядность правил трансформации. Одно и то же описание трансформации может использоваться во многих проектах. При этом скорее всего потребуются его изменение и настройка под специфические требования. Это означает, что описание трансформации должно быть понятно не только создавшему его программисту, но и тому, кто планирует его использовать. Язык описания трансформации должен быть понятным для человека и иметь легко читаемую нотацию. Также желательно, чтобы язык допускал эффективное структурирование описания трансформации, т.~е. его разбиение на слабо зависимые части. Без подобного структурирования будет очень сложно изменять описание трансформации большого объема, так как для оценки результата изменения придется проверять все описание трансформации, а не только его структурно независимую часть.

Взаимосвязанная трансформация нескольких моделей. При разработке ПО с использованием MDA в рамках одного проекта может иметься несколько UML"=моделей (соответствующих разным метамоделям или разным технологическим платформам). Поэтому язык трансформации должен предусматривать наличие более чем одной исходной и генерируемой модели. Если трансформация всех моделей происходит одновременно и по общему описанию, то процесс трансформации проще описывать (по сравнению со случаем, когда для каждой генерируемой модели существует отдельное описание трансформации), так как обычно трансформация моделей одного проекта имеет много общего. Кроме того, при одновременной трансформации проще выявлять соответствие между элементами моделей и генерировать разного рода вспомогательные модели (межплатформенные адаптеры, описания интерфейсов и т.~д.) \cite{b56}.

# Способы трансформации

Существует несколько способов описания и выполнения трансформаций UML"=моделей. Простейшим способом является императивное описание процесса трансформации с использованием алгоритмического языка. При этом в среду разработки на этапе ее создания встраивается набор модулей трансформаций, которые позднее могут быть задействованы разработчиком для генерирования программного кода. Однако у такого подхода имеется ряд недостатков, которые делают его малопригодным для использования в рассматриваемой методике синтеза программного кода. Прежде всего у разработчика отсутствует возможность добавлять новые описания трансформаций или изменять существующие; он вынужден использовать то, что сделано разработчиками инструмента. Кроме того, из"=за отсутствия единого стандарта описания трансформаций разные среды разработки неминуемо будут выполнять трансформации по"=разному даже для одной и той же технологической платформы, что может привести к возникновению случаев несовместимости и затруднит смену сред разработки: вместо зависимости от технологической платформы программист окажется в зависимости от выбранной им среды разработки. И наконец, подобный подход означает, что для каждой среды разработки придется писать полный набор описаний трансформаций для всех популярных технологий, вместо того чтобы использовать стандартные описания трансформаций, созданные независимыми разработчиками.

трансформаций, созданные независимыми разработчиками. Другой подход~-- использование уже разработанных механизмов трансформаций и преобразований. В частности, можно представить UML"=модель в виде графа и использовать математический аппарат трансформации графов \cite{b102}. Главный недостаток такого подхода состоит в том, что в нем используется собственный понятийный аппарат, не имеющий отношения к UML"=моделированию. Это значит, что от пользователей такой системы требуется знание не только UML"=моделирования, но и теории графов и принципов их трансформации. Кроме того, поскольку UML"=модель несет семантическую нагрузку, отличную от формального графа, правила трансформации, сформулированные для графа, будут трудны для понимания с точки зрения UML"=модели, так как для понимания трансформации придется мысленно совершать переход от графа к породившей его UML"=модели, а для внесения изменений в описание трансформации~-- постусловиями от U М L к графу.

Еще один вариант заключается в использовании методик трансформации XML"=документов и стандарта XMI.~Этот формат предназначен, главным образом, для хранения UML"=данных, а также любых других данных, метамодель которых задана с помощью MOF (Meta Object Facility). XMI обеспечивает обмен данными (моделями) между различными инструментами и средами разработки.

Для ХМI существует несколько хорошо развитых методик трансформации, в частности, XSLT u XQuery. Для трансформации UML"=модели можно преобразовать ее в ХМI"=представление, выполнить трансформацию средствами работы с XML u затем преобразовать результат обратно в UML.~Ho XMI разрабатывался прежде всего, как стандарт хранения и обмена ЬМ1~-- данными, он сложен для чтения и понимания пользователем. Из"=за того, что трансформация описывается в терминах XML, а не UML, большая часть описания трансформации оказывается направленной на то, чтобы в результате получить XML"=документ, соответствующий стандарту ХМ1 \cite{b145}, а не на собственно описание трансформации U M L.

В предложенном подходе к реализации MDA генерирование программного кода осуществляется при помощи последовательной трансформации исходной модели ИС.~Элементы трансформации представлены логическими правилами (продукциями), формирующими базу знаний. Данная база знаний и процедура трансформации фактически являются моделью программно"=аппаратной платформы, для которой реализуется ИС.

# ТРАНСФОРМАЦИЯ МОДЕЛЕЙ НА ОСНОВЕ ЛОГИЧЕСКИХ ПРАВИЛ

Для реализации ИС в рамках MDA"=подхода предложена технология, основанная на применении формализованных знаний в процессе трансформации моделей. PSM"=модель ИС представляется в виде UML"=диаграммы. Возможности практически любого UML"=редактора (Poseidon, Umbrella, Rational Rose и др.) позволяют сохранить модель в виде XML"=документа. В таком формате документ поступает на вход транслятора, обеспечивающего его трансформацию и последующий синтез программного кода.

Этот файл поступает на вход XMI"=транслятора, базирующегося на стандартной библиотеке 11Ьхт12 \cite{b151}, который преобразует данные XMI"=файла в объектную модель документа, удовлетворяющую требованиям структуры DOM"=2 [119].

Объектная модель обрабатывается сценарием, написанным и исполняемым в среде Python. По мере перебора элементов объектной модели, в соответствии с требованиями к ИС сценарий запускает для их трансформации интерпретатор Prolog. Данное преобразование объектов ИС осуществляется с целью выделения особенностей, позволяющих сгенерировать реализующий их программный код. Генерация программного кода при отсутствии достаточных данных осуществляется сценарием. Таким образом, синтез программного кода ИС проводится с учетом логических правил, специфицирующих программно"=аппаратную платформу.

База знаний (БЗ) представлена в продукционно"=логическом формализме: левая часть~-- в виде правил языка Prolog, правая~-- в виде набора инструкций языка Python и, по сути, является логической моделью программно"=аппаратной платформы ИС.

В результате работы интерпретатора в подсистему Prolog поступает терм~-- загруженное транслятором дерево XM I.~Практически каждый терм содержит идентификатор (атомарное строковое значение), который стоит на первом месте. Функции интерпретатора осушествляют отображение идентификатора на терм, возврашая еше и ссылку на этот терм.

Правила языка Prolog распознают поддеревья заданной структуры и извлекают из этих структур необходимые данные. Данные обрабатываются в теле правила, и в результате этой обработки в базу данных Prolog добавляются соответствующие факты о модели ИС.

На каждом этапе анализа формируется заключение о наличии какого"=либо свойства у группы объектов (к базе фактов добавляется новый факт) или генерируется часть исходного кода целевой подсистемы. В ходе анализа OCL"=выражения экстрагируются из модели и в дальнейшем могут быть применены в любом из блоков ИС в соответствии со сценарием обработки. Обработка OCL представляет собой преобразование древовидного представления этого выражения в контексте проводимого анализа и интерпретации модели в зависимости от особенностей программно"=аппаратной реализации. Например, в самом простом случае преобразований, если в процессе анализа объектной структуры происходит замена одного класса другим, то для всех древовидных представлений OCL"=выражений, ссылающихся на заменяемый класс, необходимо сгенерировать версии деревьев"=потомков для заменяюшего класса.

Заметим, что процесс формирования БЗ достаточно трудоемок. Это является одной из причин, почему данный вид программирования целесообразно применять лишь для сложных ИС.

Благодаря использованию языка Prolog можно создавать БЗ, которая настраивается сценариями генерации на решение различных задач синтеза ИС.~Данный подход позволяет проводить автоматический синтез объектов ИС в соответствии с точкой зрения программиста, реализованной посредством логических правил. Последовательная трансляция позволяет на каждой стадии определить методы и способ представления каждого из объектов ИС, представленных в PIM.~Накопленные знания могут быть использованы повторно. В то же время стандартные средства разработки, используюшие CASE, как правило, генерируют программный код без учета специфики реализации объектов ИС.

Применение предлагаемой технологии обеспечивает накопление формализованных знаний о программно"=аппаратных платформах реализации ИС, а также построение формализованного описания процесса программирования. Подход позволяет понизить стоимость внесения изменений на ранних стадиях процесса разработки, а также на этапе сопровождения уже функционирующей \cite{b58}.

Приведем основные отличия предложенного подхода использования MDA от популярных технологий. В случае использования модулей CASE"=средств (например, BOLD for Delphi) независимо генерируются коды подсистем. В MDA генерирование кода зависит от параметра~-- модели платформы, которая настраивается на конкретную специфику задачи.

Существующие системы MDA (например, Dresden OCL2 Toolkit), как правило, специализированы на конкретную систему программирования. Предлагаемый подход позволяет объединять свойства систем программирования на различных уровнях абстракции представления ИС.

# ПРИМЕНЕНИЕ ТЕХНОЛОГИИ СИНТЕЗА КАРКАСА ИНФОРМАЦИОННОЙ СИСТЕМЫ ДЛЯ СОЗДАНИЯ МЕДИЦИНСКОЙ ИНФОРМАЦИОННОЙ СИСТЕМЫ «ПОПУЛЯЦИОННЪ|Й РАКОВЫЙ РЕГИСТР»

Одной из актуальных задач для эффективного развития территорий является забота о здоровье населения. В настоящее время во всем мире отмечается рост уровня онкологических заболеваний. Для профилактики, учета данного вида заболеваний, анализа эфективности проводимого лечения в России создана система Государственного ракового регистра. Данный регистр формируется на основе данных, получаемых в регионах России. Автоматизация ведения ракового регистра путем внедрения информационных технологий в организацию и деятельность органов и учреждений здравоохранения в современных условиях является важнейшим инструментом реализации государственной политики по обеспечению населения качественной медицинской помощью.

На основе технологии синтеза каркаса информационной системы создана кроссплатформенная медицинская ИС «Популяционный раковый регистр» (МИС ПРР), выполненная в виде Web"=ресурса, удовлетворяющая требованиям, предъявляемым к системам Министерством здравоохранения РФ, и рекомендациям специалистов Государственного бюджетного учреждения здравоохранения «Иркутский областной онкологический диспансер» (ИООД).

Данная технология позволяет оперативно адаптировать ИС к изменяюшимся требованиям по ведению ракового регистра, а также к возможным изменениям программно"=аппаратной реализации. Изменения МИС проводятся путем модификации модели и/или способов ее трансформации.

МИС ПРР обеспечивает полный цикл регистрации, учета, модификации данных, необходимых для ведения популяционного ракового регистра. Ее использование позволяет значительно автоматизировать документооборот по ведению регистра. В МИС ПРР предложены механизмы взаимодействия со сторонними программами, обеспечивающими ведение и сопровождение регистра. Реализованы подсистемы конвертации данных и генерации отчетных форм. Эти подсистемы позволяют загружать информацию из БД ранее используемых программ, создавать печатные формы первичных документов регистра, формировать ежегодные отчеты. ИС является «клиент"=серверным» Web"=ресурсом с поддержкой кроссплатформенности. Применение Webтехнологий позволяет избегать необходимости установки специализированного программного обеспечения на каждую рабочую станцию, а кроссплатформенность снижает зависимость от политики поставщиков программного обеспечения и обеспечивает достаточно высокий уровень масштабируемости.

## Информационные потоки

В МИС ПРР реализуются следующие информационные потоки (рис. 6.3). При первом обрашении пациента в онкологический кабинет или диспансер на него заводится документ «Извещение о впервые установленном злокачественном новообразовании». Если у больного установлена четвертая стадия заболевания, то на него заполняется документ «Протокол запущенности». Если больному проводится какое"=либо лечение, обследования, то эти данные помешаются в документ «Выписка из медицинской карты» («Регистрационная карта»). На случай повторного обрашения больного заводится документ «Талон дополнения», в котором устанавливается дата повторного посещения ИООД.~В случае смерти больного заполняется документ «Свидетельство о смерти».

Все данные заносятся в БД.~На основе анализа данных в БД строятся отчеты и аналитические выборки. Заполненные бланки и отчеты в обязательном порядке распечатываются на бумажных носителях и сдаются в соответствующие учреждения органов местного самоуправления и минздравсоцразвития области.

Рисунок. Общая схема информационных потоков МИС «Популяционный раковый регистр».

Разработанная МИС ПРР является кроссплатформенным Web"=приложением, реализованным на основе программной среды Zope"=2 (The Object Publishing Environment~-- среда публикации объектов), которая использует принципы объектно"=ориентированного системного дизайна и программирования.

Для хранения данных использована система управления БД MySQL, которая обеспечивает необходимый уровень производительности. Internet"=приложение МИС ПРР взаимодействует с реляционной БД через специальный уровень абстракции, представляющий реляционные отношения в виде объектов приложения. Эго, наряду с богатыми выразительными свойствами языка Python, на котором реализована среда Zope"=2, повышает скорость разработки и упрощает процесс внесения изменений в МИС ПРР.~Реляционное представление само по себе интенсивно используется в процессе порождения отчетов. Подпрограммы для порождения отчетов базируются в основном на реляционных запросах к БД PP.~Результаты представляются в виде HTML-документов, а также документов в форматах ODT (до-
кументы открытой офисной системы Open Office).

## Особенности технологии разработки, функционирования и сопровождения

Разработка МИС ПРР регламентировалась такими требованиями, как использование стандартов открытых систем, возможность оперативной модификации, удаленный доступ к ресурсам МИС, возможность работы в распределенном режиме, поддержка деятельности всех участников внутреннего информационного обмена и обеспечение взаимодействия с внешними участниками информационного обмена.

Основываясь на данных требованиях, МИС ПРР создана как Web"=приложение с трехзвенной архитектурой.

Среда реализации МИС ПРР:

OS Linux;

СУБД MySQL;

Сервер приложений Z Object Publishing Environment (ZOPE).

Приложения, составляющие ИС, являются кроссплатформенными. Это позволит ослабить зависимость ИС от операционной системы. Также отсутствует необходимость синтезировать новый программный код в случае установки и запуска в эксплуатацию, например, в другой онкологической клинике. Более подробно опишем приведенные программные средства.

Для хранения данных используется система управления базами данных (СУБД) MySQL, которая характеризуется большой скоростью, устойчивостью и легкостью в использовании, нетребовательна к вычислительным ресурсам сервера БД.~Наряду с Oracle Database это одна из самых высоких по производительности СУБД.

Web"=сервер Apache является одним из наиболее популярных, достоинствами его считаются надежность и гибкость конфигурации. Он позволяет подключать внешние модули для предоставления данных, использовать СУБД для аутентификации пользователей, модифицировать сообщения об ошибках и т.~д. Сервер имеет широкие возможности конфигурирования, и для него существует большое число подключаемых модулей, расширяющих его функциональные возможности.

В качестве сервера приложений используется ZOPE, поскольку данная среда обладает следующими важными качествами:

в ХОРЕ реализован объектно"=ориентированный подход для проектирования Web"=приложений. Например, данную среду можно рассматривать как серверную программную систему, обеспечивающую одновременную работу нескольких клиентов с одним объектом; большинство объектов сохраняется в объектно"=ориентированной БД.~Кроме того, при помощи специализированных модулей в ХОРЕ обеспечивается доступ к реляционным БД, а также интеграция этих данных с объектами бизнес"=логики;

в основе программной среды ХОРЕ лежит легко усваиваемый, имеющий простые синтаксические структуры, простой в понимании и чтении язык объектно"=ориентированного программирования Python;

автоматизация компоновки низкоуровневых процедур, например, реализованных в языке С со средой Python"=ХОРЕ.~Эта возможность позволяет реализовать достаточно стандартизованными процедурами высокоэффективный переносимый кроссплатформленный код.

МИС «Популяционный раковый регистр» имеет сложную структуру. Число программируемых сущностей более 100, они описывают структуру системы, структуру базы данных, взаимодействия между объектами. В результате генерации программного кода были сформированы 91 таблица баз данных, порядка 8000 строк кода методов классов. Время генерации кода по UMLописанию составляет около 1 мин. Объем программного кода генератора каркаса составляет порядка 7000 строк.

На рис. 6.4 представлена общая архитектура среды МИС ПРР.

Рисунок. Архитектура среды информационно-аналитической системы.

Использование моделирования позволяет в цикле разработки МИС автоматически генерировать:

структуру БД MySQL;

иерархию классов и метаинформацию об этих классах, доступную во время исполнения МИС;

объектно"=ориентированную абстракцию над таблицами реляционной БД;

XML"=шаблоны уровня представления данных для обеспечения сетевого взаимодействия МИС с другими программными системами;

шаблон функций языка программирования С для модуля импорта данных;

функции для модуля обмена данными на языке Pascal;

шаблоны элементов и каркас пользовательского интерфейса, в котором создается минимально необходимый набор функций для управления данными системы.

Любой информационный ресурс требует сопровождения. МИС ПРР не является исключением. Сопровождение включает:

оперативное устранение возникающих неполадок;

добавление новых функциональных возможностей;

возможность модификации печатных и отчетных форм.

Доступ к функциям администрирования и настройки предоставляются через стандартный интерфейс ZOPE (рис. 6.5).

Структура ресурса представлена в виде дерева, отображаемого в левой части интерфейса администрирования. Администратор имеет возможность обратиться к любому объекту МИС.~Большинство объектов ИС выполнено на транслируемых языках, таких как HTML, Python, что позволяет изменять практически любой программируемый объект путем корректировки его программного кода. В случае возникновения ошибок администратор имеет возможность получить список объектов, породивших ошибки, а также возможные причины. Для того чтобы увидеть причину ошибки, надо обратиться к стандартному объекту Error.

Таким образом, программная среда, в которой реализована МИС ПРР, позволяет обеспечить комплекс действий по администрированию, настройке и отладке информационной системы.

(Пропускаем функ возможности)

## Реализация отчетов

(расказать как АПИ сгенерированный используется)

## Подсистема конвертации данных

Для существующей в Иркутском областном онкологическом диспансере БД разработана подсистема, позволяющая извлекать данные и представлять их в обменном формате XML, что позволяет хранить структурированные данные и обмениваться этими данными между приложениями.

Для внесения информации в БД ИС ПРР заложены механизмы, интерпретирующие сведения, содержащиеся в обменных XML"=данных. Возможна обработка как данных по одному XML"=документу через Web"=интерфейс, так и множества документов посредством запуска интерпретатора на сервере. Таким образом, разработанные технологии позволяют переносить данные из одного формата в другой без потери информации, кроме того, указанный обменный формат может быть использован для обеспечения взаимодействия различных экземпляров территориально распределенных систем ПРР.

# ВЫВОДЫ

На основе порождающего программирования в рамках подхода MDA разработана оригинальная технология создания информационных систем, в которой программный код базовых подсистем (каркаса) ИС синтезируется по их формализованному описанию, представленному в виде UML"=модели. Порождение кода ведется с исполнением сценариев синтеза, осуществляющих запросы к базе знаний, содержащей правила трансформации моделей. Программный код синтезируется на основе шаблонов, встроенных в правила и сценарии трансформации. Синтез программного кода является процедурой преобразования UML"=модели, задающей требования к архитектуре ИС с учетом данных в базе знаний относительно среды реализации.

Применение технологии синтеза каркаса информационной системы по ее формальной модели показало ее высокую эффективность при создании медицинской информационной системы «Популяционный раковый регистр».
