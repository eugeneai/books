(?) One of the approaches for implementing concept of generative  programming, is MDA. MDA is based on a set of models to be modified in oreder to obtain the source code. (?) However, the specification of the software to be gnerated does not prescribe the ways of transformation of the models. Consider the model formalisms of information systems (IS), their representation and transformation.

(!) According to MDA the process of creating the IS begins with the engineering a so called Computing independent model (CIM)) or Platform Independent Model (PIM) \cite{b115}. MDA does not prescribe the construction of CIM in every project and it is optional. CIM describes general requirements to the system, dictionary of the terms used, and operating conditions (the environment). The model must not contain any information of technical nature, descriptions of data structures and functionality of the system. (Here we add Juring addition)  CIM is to be as general as possible and not dependent on the implementation of the systems. This model is implemented frequently in Unified Modeling Language (UML) [l46], and further enriched and refined.

CIM refinements lead to specification og PIM. We have no experience of usage CIM in IS specifications, but \ldots.

PIM is the basis of MDA. Using PIM IS is described on an abstract level, which allows us to consider the IS under development as independent of the specific properties of software and hardware platform, where it is to be implementaed. According to MDA, PIM is recommended to contain a high degree of detail, and use a high-level platform independent programming language for describing IS functions. However, in the MDA specifications, the details of describing the behavior of the system from the user point of view must be free of thee details of its implementation: the latter should not be present in the PIM. One way to represent PIM is UML, and in a development process UML diagrams are the language for formal description of the system, as well as means of documenting. A very specific implementation aspects of subsystems are described with custom UML tags values and stereotypes.

The source PIM in a general case contains formalized constraints specified in the Object Constraint Language (OCL) [70, 156]. The constraints play an important role in the design and implementation of the IS, they define the properties of the domain and its implementation perculiarities. (about compromize OCL representation of formatm mat theory of sets and informal natural languages....for constraint definition.) Usage of a natural language for constraint definition is not practical as its translators are complex and language terms are not uniquely interpreted. The sets theory and mathematical language are the means of construction of the precise uniquely interpreted formalisms for a constraint definition language, but it is not convenient for a regular programmer. (SKIP) OCL is a compramise formalism that aloso supports the object-oriented traditions. (SKIP) (SKIP)

(SKIP) (?) Consistency criteria and preperties of model structure elements are defined with OCL, such as. (SKIP) (SKIP) 

invariant constraints, which must hold after object instance creation till its destruction;

(?) guarding conditions; (SKIP) guarging conditions are written in brackets and interpreted as triggers; 

definition of pre- and postconditions of operations; (SKIP)

 The OCL constraint is defined within a context denoted as a name of instance or class. Execution result of the OCL equation is a boolean value. (SKIP) OCL includes three operations:

atribute value evaluation;

association transition;

sending message to an instance and receiving the answer.

(?) OCL allows one to track the class instances, and the instances of descendant classes.

After PIM are sufficiently detailed, the Platform specific model (PSM) is constructed \cite{b115}. PSM is a framework model of the IS, where the IS functionality is represented taking into account the properties of the target software and hardware implementation platform.

The transformation from PIM to PSM is carried out according to a formal representation of the properties of the target platform, i.e., Platform Model (PM). PSM is constructed by means of adding details about target platform into PIM.  (SKIP PSM is a source code representation) e. (Skip PSM is mostly detailed PIM)  PSM contains model details to completely generate source code of subsystems according to the structures and properties defined in it. A general scheme of PIM to PSM transformation is presented in Figure 6.1

Figure. Scheme of IS framework development according to MDA

Our approach to PIM-PSM transformation is constructed with knowledge based systems.

The initial stage of development is developing of technical specifications and requirements posed by IS. Architecture and requirements for IIS is represented as an object information model, expressed in the form of class diagrams of UML. In this case it represents the PIM. The next stage is the automatic generation of the PSM and code of IS framework. Depending on the rules that specify the requirements for target platform and the existing code templates, a number of implementations of the same IS can be generated. In the case of distributed environments, the common model ensures the compatibility of the interfaces for information exchange in the environment.

The results of the code generation of IS framework \cite{b93} are:

the SQL queries for DB tables creation, and create, edit, delete statements for table records manitpulation;

API for the database and IS interaction;

stubs (templates) of graphics user interface widget layouts.

Figure. Scheme of the use of technology in the development of IS

After generating the program code of the IS its adaptation required. (?) It embodies the binding generated elements of IS. The scheme of application of this technology for the synthesis of the IS framework is shown in Fig. 6.2.

The use of formalized representation of the model allows one to simplify the development of interfaces for data import from legacy, and to ensure the integrity of the dataset presented in the IS.

# METHODOLOGY OF MODEL TRANSFORMATIONS

In accordance with the specification of the MDA subsystem code of  IS framework should be generated automatically on the basis of information and structural models of IS. Consider the technology of the automatic synthesis (generation) of the target program code of the IS out of its model. Generating program code is performed using a sequential transformation of the original model of IS.

The requirements which should correspond to the software of transformation models for its application in MDA are as follows:

(SHT) The ?formality? and completeness. Using the description language of transformations one could specify any transformation to any target platform. The description should be formalized so that it can be used in automatic execution.

(SHT) The universality of the rules of transformation. (SHT) MDA has the advantage over standard approaches to software development due to the fact that the transition to PSM can be reached by means of the standard descriptions of transformations. (SHT, SKIP) If for each system the transformation had to describe again, it would have been even less effective than the transition from the PIM to the PSM manually. Therefore, the language of the description of the transformation must allow specification of transformations that apply to many projects, not just for one specific UML model. (SHT) The language has to include the means of the configuration and parameterization of the transformation, which do not require radical alterations in all the description of the transformation.

Support integrity chek in modification processing. (SHT) During development, no model is unchanged. After transformation, source models and models created in the process of transformation might be changed. Thus there must be a way to maintain correspondence between these models after the transformation process. The information about the progress of transformation and the process of transformation of dependencies between model elements must be kept, and a specialized editing tool of UML colud use this information to automatically maintain consistency between the models.

Visibility rules of transformation. The same description of the transformation could be used in many projects. In this case, change and adaptation of the description will be required to specific conditions. The description of the transformation must be understood not only by the creator programmer, but also someone who is planning to use it. The description language of the transformation should be human-readable and have easy-to-read notation. It is also desirable that language would allow the efficient structuring of the description of the transformation i. e. splitting on the weakly dependent parts. Без подобного структурирования будет очень сложно изменять описание трансформации большого объема, так как для оценки результата изменения придется проверять все описание трансформации, а не только его структурно независимую часть.

Взаимосвязанная трансформация нескольких моделей. При разработке ПО с использованием MDA в рамках одного проекта может иметься несколько UML"=моделей (соответствующих разным метамоделям или разным технологическим платформам). Поэтому язык трансформации должен предусматривать наличие более чем одной исходной и генерируемой модели. Если трансформация всех моделей происходит одновременно и по общему описанию, то процесс трансформации проще описывать (по сравнению со случаем, когда для каждой генерируемой модели существует отдельное описание трансформации), так как обычно трансформация моделей одного проекта имеет много общего. Кроме того, при одновременной трансформации проще выявлять соответствие между элементами моделей и генерировать разного рода вспомогательные модели (межплатформенные адаптеры, описания интерфейсов и т. д.) \cite{b56}.

# Способы трансформации

Существует несколько способов описания и выполнения трансформаций UML"=моделей. Простейшим способом является императивное описание процесса трансформации с использованием алгоритмического языка. При этом в среду разработки на этапе ее создания встраивается набор модулей трансформаций, которые позднее могут быть задействованы разработчиком для генерирования программного кода. Однако у такого подхода имеется ряд недостатков, которые делают его малопригодным для использования в рассматриваемой методике синтеза программного кода. Прежде всего у разработчика отсутствует возможность добавлять новые описания трансформаций или изменять существующие; он вынужден использовать то, что сделано разработчиками инструмента. Кроме того, из"=за отсутствия единого стандарта описания трансформаций разные среды разработки неминуемо будут выполнять трансформации по"=разному даже для одной и той же технологической платформы, что может привести к возникновению случаев несовместимости и затруднит смену сред разработки: вместо зависимости от технологической платформы программист окажется в зависимости от выбранной им среды разработки. И наконец, подобный подход означает, что для каждой среды разработки придется писать полный набор описаний трансформаций для всех популярных технологий, вместо того чтобы использовать стандартные описания трансформаций, созданные независимыми разработчиками.

трансформаций, созданные независимыми разработчиками. Другой подход~-- использование уже разработанных механизмов трансформаций и преобразований. В частности, можно представить UML"=модель в виде графа и использовать математический аппарат трансформации графов \cite{b102}. Главный недостаток такого подхода состоит в том, что в нем используется собственный понятийный аппарат, не имеющий отношения к UML"=моделированию. Это значит, что от пользователей такой системы требуется знание не только UML"=моделирования, но и теории графов и принципов их трансформации. Кроме того, поскольку UML"=модель несет семантическую нагрузку, отличную от формального графа, правила трансформации, сформулированные для графа, будут трудны для понимания с точки зрения UML"=модели, так как для понимания трансформации придется мысленно совершать переход от графа к породившей его UML"=модели, а для внесения изменений в описание трансформации~-- постусловиями от U М L к графу.

Еще один вариант заключается в использовании методик трансформации XML"=документов и стандарта XMI. Этот формат предназначен, главным образом, для хранения UML"=данных, а также любых других данных, метамодель которых задана с помощью MOF (Meta Object Facility). XMI обеспечивает обмен данными (моделями) между различными инструментами и средами разработки.

Для ХМI существует несколько хорошо развитых методик трансформации, в частности, XSLT u XQuery. Для трансформации UML"=модели можно преобразовать ее в ХМI"=представление, выполнить трансформацию средствами работы с XML u затем преобразовать результат обратно в UML. Ho XMI разрабатывался прежде всего, как стандарт хранения и обмена ЬМ1~-- данными, он сложен для чтения и понимания пользователем. Из"=за того, что трансформация описывается в терминах XML, а не UML, большая часть описания трансформации оказывается направленной на то, чтобы в результате получить XML"=документ, соответствующий стандарту ХМ1 \cite{b145}, а не на собственно описание трансформации U M L.

В предложенном подходе к реализации MDA генерирование программного кода осуществляется при помощи последовательной трансформации исходной модели ИС. Элементы трансформации представлены логическими правилами (продукциями), формирующими базу знаний. Данная база знаний и процедура трансформации фактически являются моделью программно"=аппаратной платформы, для которой реализуется ИС.

# ТРАНСФОРМАЦИЯ МОДЕЛЕЙ НА ОСНОВЕ ЛОГИЧЕСКИХ ПРАВИЛ

Для реализации ИС в рамках MDA"=подхода предложена технология, основанная на применении формализованных знаний в процессе трансформации моделей. PSM"=модель ИС представляется в виде UML"=диаграммы. Возможности практически любого UML"=редактора (Poseidon, Umbrella, Rational Rose и др.) позволяют сохранить модель в виде XML"=документа. В таком формате документ поступает на вход транслятора, обеспечивающего его трансформацию и последующий синтез программного кода.

Этот файл поступает на вход XMI"=транслятора, базирующегося на стандартной библиотеке 11Ьхт12 \cite{b151}, который преобразует данные XMI"=файла в объектную модель документа, удовлетворяющую требованиям структуры DOM"=2 [119].

Объектная модель обрабатывается сценарием, написанным и исполняемым в среде Python. По мере перебора элементов объектной модели, в соответствии с требованиями к ИС сценарий запускает для их трансформации интерпретатор Prolog. Данное преобразование объектов ИС осуществляется с целью выделения особенностей, позволяющих сгенерировать реализующий их программный код. Генерация программного кода при отсутствии достаточных данных осуществляется сценарием. Таким образом, синтез программного кода ИС проводится с учетом логических правил, специфицирующих программно"=аппаратную платформу.

База знаний (БЗ) представлена в продукционно"=логическом формализме: левая часть~-- в виде правил языка Prolog, правая~-- в виде набора инструкций языка Python и, по сути, является логической моделью программно"=аппаратной платформы ИС.

В результате работы интерпретатора в подсистему Prolog поступает терм~-- загруженное транслятором дерево XM I. Практически каждый терм содержит идентификатор (атомарное строковое значение), который стоит на первом месте. Функции интерпретатора осушествляют отображение идентификатора на терм, возврашая еше и ссылку на этот терм.

Правила языка Prolog распознают поддеревья заданной структуры и извлекают из этих структур необходимые данные. Данные обрабатываются в теле правила, и в результате этой обработки в базу данных Prolog добавляются соответствующие факты о модели ИС.

На каждом этапе анализа формируется заключение о наличии какого"=либо свойства у группы объектов (к базе фактов добавляется новый факт) или генерируется часть исходного кода целевой подсистемы. В ходе анализа OCL"=выражения экстрагируются из модели и в дальнейшем могут быть применены в любом из блоков ИС в соответствии со сценарием обработки. Обработка OCL представляет собой преобразование древовидного представления этого выражения в контексте проводимого анализа и интерпретации модели в зависимости от особенностей программно"=аппаратной реализации. Например, в самом простом случае преобразований, если в процессе анализа объектной структуры происходит замена одного класса другим, то для всех древовидных представлений OCL"=выражений, ссылающихся на заменяемый класс, необходимо сгенерировать версии деревьев"=потомков для заменяюшего класса.

Заметим, что процесс формирования БЗ достаточно трудоемок. Это является одной из причин, почему данный вид программирования целесообразно применять лишь для сложных ИС.

Благодаря использованию языка Prolog можно создавать БЗ, которая настраивается сценариями генерации на решение различных задач синтеза ИС. Данный подход позволяет проводить автоматический синтез объектов ИС в соответствии с точкой зрения программиста, реализованной посредством логических правил. Последовательная трансляция позволяет на каждой стадии определить методы и способ представления каждого из объектов ИС, представленных в PIM. Накопленные знания могут быть использованы повторно. В то же время стандартные средства разработки, используюшие CASE, как правило, генерируют программный код без учета специфики реализации объектов ИС.

Применение предлагаемой технологии обеспечивает накопление формализованных знаний о программно"=аппаратных платформах реализации ИС, а также построение формализованного описания процесса программирования. Подход позволяет понизить стоимость внесения изменений на ранних стадиях процесса разработки, а также на этапе сопровождения уже функционирующей \cite{b58}.

Приведем основные отличия предложенного подхода использования MDA от популярных технологий. В случае использования модулей CASE"=средств (например, BOLD for Delphi) независимо генерируются коды подсистем. В MDA генерирование кода зависит от параметра~-- модели платформы, которая настраивается на конкретную специфику задачи.

Существующие системы MDA (например, Dresden OCL2 Toolkit), как правило, специализированы на конкретную систему программирования. Предлагаемый подход позволяет объединять свойства систем программирования на различных уровнях абстракции представления ИС.

# ПРИМЕНЕНИЕ ТЕХНОЛОГИИ СИНТЕЗА КАРКАСА ИНФОРМАЦИОННОЙ СИСТЕМЫ ДЛЯ СОЗДАНИЯ МЕДИЦИНСКОЙ ИНФОРМАЦИОННОЙ СИСТЕМЫ «ПОПУЛЯЦИОННЪ|Й РАКОВЫЙ РЕГИСТР»

Одной из актуальных задач для эффективного развития территорий является забота о здоровье населения. В настоящее время во всем мире отмечается рост уровня онкологических заболеваний. Для профилактики, учета данного вида заболеваний, анализа эфективности проводимого лечения в России создана система Государственного ракового регистра. Данный регистр формируется на основе данных, получаемых в регионах России. Автоматизация ведения ракового регистра путем внедрения информационных технологий в организацию и деятельность органов и учреждений здравоохранения в современных условиях является важнейшим инструментом реализации государственной политики по обеспечению населения качественной медицинской помощью.

На основе технологии синтеза каркаса информационной системы создана кроссплатформенная медицинская ИС «Популяционный раковый регистр» (МИС ПРР), выполненная в виде Web"=ресурса, удовлетворяющая требованиям, предъявляемым к системам Министерством здравоохранения РФ, и рекомендациям специалистов Государственного бюджетного учреждения здравоохранения «Иркутский областной онкологический диспансер» (ИООД).

Данная технология позволяет оперативно адаптировать ИС к изменяюшимся требованиям по ведению ракового регистра, а также к возможным изменениям программно"=аппаратной реализации. Изменения МИС проводятся путем модификации модели и/или способов ее трансформации.

МИС ПРР обеспечивает полный цикл регистрации, учета, модификации данных, необходимых для ведения популяционного ракового регистра. Ее использование позволяет значительно автоматизировать документооборот по ведению регистра. В МИС ПРР предложены механизмы взаимодействия со сторонними программами, обеспечивающими ведение и сопровождение регистра. Реализованы подсистемы конвертации данных и генерации отчетных форм. Эти подсистемы позволяют загружать информацию из БД ранее используемых программ, создавать печатные формы первичных документов регистра, формировать ежегодные отчеты. ИС является «клиент"=серверным» Web"=ресурсом с поддержкой кроссплатформенности. Применение Webтехнологий позволяет избегать необходимости установки специализированного программного обеспечения на каждую рабочую станцию, а кроссплатформенность снижает зависимость от политики поставщиков программного обеспечения и обеспечивает достаточно высокий уровень масштабируемости.

## Информационные потоки

В МИС ПРР реализуются следующие информационные потоки (рис. 6.3). При первом обрашении пациента в онкологический кабинет или диспансер на него заводится документ «Извещение о впервые установленном злокачественном новообразовании». Если у больного установлена четвертая стадия заболевания, то на него заполняется документ «Протокол запущенности». Если больному проводится какое"=либо лечение, обследования, то эти данные помешаются в документ «Выписка из медицинской карты» («Регистрационная карта»). На случай повторного обрашения больного заводится документ «Талон дополнения», в котором устанавливается дата повторного посещения ИООД. В случае смерти больного заполняется документ «Свидетельство о смерти».

Все данные заносятся в БД. На основе анализа данных в БД строятся отчеты и аналитические выборки. Заполненные бланки и отчеты в обязательном порядке распечатываются на бумажных носителях и сдаются в соответствующие учреждения органов местного самоуправления и минздравсоцразвития области.

Figure. Общая схема информационных потоков МИС «Популяционный раковый регистр».

Разработанная МИС ПРР является кроссплатформенным Web"=приложением, реализованным на основе программной среды Zope"=2 (The Object Publishing Environment~-- среда публикации объектов), которая использует принципы объектно"=ориентированного системного дизайна и программирования.

Для хранения данных использована система управления БД MySQL, которая обеспечивает необходимый уровень производительности. Internet"=приложение МИС ПРР взаимодействует с реляционной БД через специальный уровень абстракции, представляющий реляционные отношения в виде объектов приложения. Эго, наряду с богатыми выразительными свойствами языка Python, на котором реализована среда Zope"=2, повышает скорость разработки и упрощает процесс внесения изменений в МИС ПРР. Реляционное представление само по себе интенсивно используется в процессе порождения отчетов. Подпрограммы для порождения отчетов базируются в основном на реляционных запросах к БД PP. Результаты представляются в виде HTML-документов, а также документов в форматах ODT (до-
кументы открытой офисной системы Open Office).

## Особенности технологии разработки, функционирования и сопровождения

Разработка МИС ПРР регламентировалась такими требованиями, как использование стандартов открытых систем, возможность оперативной модификации, удаленный доступ к ресурсам МИС, возможность работы в распределенном режиме, поддержка деятельности всех участников внутреннего информационного обмена и обеспечение взаимодействия с внешними участниками информационного обмена.

Основываясь на данных требованиях, МИС ПРР создана как Web"=приложение с трехзвенной архитектурой.

Среда реализации МИС ПРР:

OS Linux;

СУБД MySQL;

Сервер приложений Z Object Publishing Environment (ZOPE).

Приложения, составляющие ИС, являются кроссплатформенными. Это позволит ослабить зависимость ИС от операционной системы. Также отсутствует необходимость синтезировать новый программный код в случае установки и запуска в эксплуатацию, например, в другой онкологической клинике. Более подробно опишем приведенные программные средства.

Для хранения данных используется система управления базами данных (СУБД) MySQL, которая характеризуется большой скоростью, устойчивостью и легкостью в использовании, нетребовательна к вычислительным ресурсам сервера БД. Наряду с Oracle Database это одна из самых высоких по производительности СУБД.

Web"=сервер Apache является одним из наиболее популярных, достоинствами его считаются надежность и гибкость конфигурации. Он позволяет подключать внешние модули для предоставления данных, использовать СУБД для аутентификации пользователей, модифицировать сообщения об ошибках и т. д. Сервер имеет широкие возможности конфигурирования, и для него существует большое число подключаемых модулей, расширяющих его функциональные возможности.

В качестве сервера приложений используется ZOPE, поскольку данная среда обладает следующими важными качествами:

в ХОРЕ реализован объектно"=ориентированный подход для проектирования Web"=приложений. Например, данную среду можно рассматривать как серверную программную систему, обеспечивающую одновременную работу нескольких клиентов с одним объектом; большинство объектов сохраняется в объектно"=ориентированной БД. Кроме того, при помощи специализированных модулей в ХОРЕ обеспечивается доступ к реляционным БД, а также интеграция этих данных с объектами бизнес"=логики;

в основе программной среды ХОРЕ лежит легко усваиваемый, имеющий простые синтаксические структуры, простой в понимании и чтении язык объектно"=ориентированного программирования Python;

автоматизация компоновки низкоуровневых процедур, например, реализованных в языке С со средой Python"=ХОРЕ. Эта возможность позволяет реализовать достаточно стандартизованными процедурами высокоэффективный переносимый кроссплатформленный код.

МИС «Популяционный раковый регистр» имеет сложную структуру. Число программируемых сущностей более 100, они описывают структуру системы, структуру базы данных, взаимодействия между объектами. В результате генерации программного кода были сформированы 91 таблица баз данных, порядка 8000 строк кода методов классов. Время генерации кода по UMLописанию составляет около 1 мин. Объем программного кода генератора каркаса составляет порядка 7000 строк.

На рис. 6.4 представлена общая архитектура среды МИС ПРР.

Figure. Архитектура среды информационно-аналитической системы.

Использование моделирования позволяет в цикле разработки МИС автоматически генерировать:

структуру БД MySQL;

иерархию классов и метаинформацию об этих классах, доступную во время исполнения МИС;

объектно"=ориентированную абстракцию над таблицами реляционной БД;

XML"=шаблоны уровня представления данных для обеспечения сетевого взаимодействия МИС с другими программными системами;

шаблон функций языка программирования С для модуля импорта данных;

функции для модуля обмена данными на языке Pascal;

шаблоны элементов и каркас пользовательского интерфейса, в котором создается минимально необходимый набор функций для управления данными системы.

Любой информационный ресурс требует сопровождения. МИС ПРР не является исключением. Сопровождение включает:

оперативное устранение возникающих неполадок;

добавление новых функциональных возможностей;

возможность модификации печатных и отчетных форм.

Доступ к функциям администрирования и настройки предоставляются через стандартный интерфейс ZOPE (рис. 6.5).

Структура ресурса представлена в виде дерева, отображаемого в левой части интерфейса администрирования. Администратор имеет возможность обратиться к любому объекту МИС. Большинство объектов ИС выполнено на транслируемых языках, таких как HTML, Python, что позволяет изменять практически любой программируемый объект путем корректировки его программного кода. В случае возникновения ошибок администратор имеет возможность получить список объектов, породивших ошибки, а также возможные причины. Для того чтобы увидеть причину ошибки, надо обратиться к стандартному объекту Error.

Таким образом, программная среда, в которой реализована МИС ПРР, позволяет обеспечить комплекс действий по администрированию, настройке и отладке информационной системы.

(Пропускаем функ возможности)

## Реализация отчетов

(расказать как АПИ сгенерированный используется)

## Подсистема конвертации данных

Для существующей в Иркутском областном онкологическом диспансере БД разработана подсистема, позволяющая извлекать данные и представлять их в обменном формате XML, что позволяет хранить структурированные данные и обмениваться этими данными между приложениями.

Для внесения информации в БД ИС ПРР заложены механизмы, интерпретирующие сведения, содержащиеся в обменных XML"=данных. Возможна обработка как данных по одному XML"=документу через Web"=интерфейс, так и множества документов посредством запуска интерпретатора на сервере. Таким образом, разработанные технологии позволяют переносить данные из одного формата в другой без потери информации, кроме того, указанный обменный формат может быть использован для обеспечения взаимодействия различных экземпляров территориально распределенных систем ПРР.

# CONCLUSION

On the basis of generative programming and adaptation of MDA approach, an  original technology of creating information systems has been developed, which supports software subsystems source code to be synthesized according to their formalized description represented as UML model. (SHT)The generation of the code is carried on by execution of sythesizing scripts, which query the knowledge base containing the rules of the model transformation. The source code is synthesized from templates embedded in the rules and scenarios of transformation. Synthesis of program code is the process of converting UML model that specifies requirements for the architecture of the IS in accordance to the knowledge base content regarding the environment of the implementation.

Application of technology of synthesis of a skeleton of the information system according to its formal model has shown its high efficiency in egineering medical information system "Population cancer register".
